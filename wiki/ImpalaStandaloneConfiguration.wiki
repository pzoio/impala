#summary How to configure Impala runtime in standalone application

== Standalone Applications ==

=== Simple Startup ===

With Spring, a standalone
Spring `ApplicationContext` will normally be set up using a call such as:

{{{
new ClassPathXmlApplicationContext(contextLocatons);
}}}

There is a little more indirection in the mechanism for starting up a standalone application context. The
easiest way to do this is to use the static method:

{{{
Impala.init();
}}}

=== Advanced Startup ===

So how do we control how Impala is configured at startup time?

The class `Impala` is really itself just a very thin wrapper with static methods around `OperationsFacade`, which in turn is a facade to the 
various operations Impala exposes. Most of the implementations you are likely to use extends `BaseOperationsFacade`. This
class defines an abstract method

{{{
protected abstract List<String> getBootstrapContextLocations();
}}}

which the concrete class will need to implement.

The default implementation used is `SuiteOperationFacade`, which implements this method as follows:

{{{
protected List<String> getBootstrapContextLocations() {

	List<String> locations = new ArrayList<String>();
	locations.add("META-INF/impala-bootstrap.xml");
	locations.add("META-INF/impala-graph-bootstrap.xml");
	locations.add("META-INF/impala-parent-loader-bootstrap.xml");
	return locations;
}
}}}

The config file _impala-graph-bootstrap.xml_ adds supports for arrangement of modules and their corresponding class loaders in a graph 
(rather than simply as a hierarchy). For more information on the use of class loaders in Impala see [ClassLoaders class loaders].

It is straightforward to change the actual implementation class used through the system property `FacadeConstants.FACADE_CLASS_NAME`, which translates
to `FacadeConstants.facade.class.name`. 

For example, when using the [InteractiveTestRunner interactive test runner], a different `OperationsFacade` subclass 
is used.

*Note*: for Impala 1.0M5 a simpler configuration mechanism will overlay the existing one which allows users to specify Impala configurations using 
pre-defined properties. See [http://code.google.com/p/impala/issues/detail?id=118 issue 118].
