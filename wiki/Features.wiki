#summary Impala features
#labels Featured

==Features==

Some of the things you can do with Impala:
  * You can specify a complex Spring application as a set of modules fitting into a module hierarchy. 
  * Modules can be dynamically added, removed and updated. Class changes are automatically reflected when modules are reloaded.
  * You can view and reload modules using JMX.
  * You can take advantage of Impala's built in mechanisms for simplifying complex applications, including configurable Spring imports.
  * You can develop and test your application without having to leave Eclipse. In other words, you can do most of your development using a completely build free development/deploy/test cycle.
  * You can run Spring integration tests interactively. For example, you can:
    * rerun modified tests without having to reload Spring application contexts
    * reload individual modules without having to restart JVM or reload full Spring context
    * reload full application context without having to restart JVM or reload third party libraries
  * You can also run Spring integration tests in a traditional way: via the ANT JUnit task, via Eclipse, both individually or as a suite.
  * Suites of integration tests can be run using incremental module loading. Each new test will only load new modules and those whose definitions have changed.
  * You can run up a web application without having to build or deploy it to an application server, thanks to Jetty's support for running embedded applications.
  * Web applications can equally be deployed as WAR files and run in Tomcat (or other application servers) with little effort.
  * Impala web applications can be single- or multi-module, in the latter case with a separate module per servlet.
  * You can take advantage of Impala's ANT based build system to build your application. No need to handcraft ANT build scripts from scratch, but at the same time, no need to use Maven.
  * You can manage your dependencies simply by using Impala's download task to retrieve your projects directly from one or more local or remote Maven repositories.