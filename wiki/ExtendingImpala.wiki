#summary Extending Impala

== Introduction ==

Impala is built to be extremely extensible. This is largely because the Impala runtime is itself is simply a set of Spring beans, but also because as much as possible it is designed with the goal of extensibility in mind. The code is highly factored, which makes it relatively easy to introduce new pieces of functionality or behaviour in a non-intrusive way.

Remember that much of Impala's built in behaviour can be configured using the Impala properties described in PropertyConfiguration. However, if existing behaviour does not meet your needs, you will probably need to add some extension to the framework.

== Impala's extension mechanism ==

As mentioned, Impala is set up as a Spring application context, but remember that it is not configured in exactly the same way as a vanilla Spring application. 

Remember that a vanilla Spring application is typically set up by specifying a list of Spring application context configuration files, in the order in which they should be loaded. This is usually done either programmatically, for example, using

{{{
new FileSystemApplicationContext(new String[]{"location1.xml", "location2.xml});
}}}

or using the `contextConfigLocation` init parameter in the _WEB-INF/web.xml_.

With Impala, the actual set of Spring locations used depends partly on the properties set in _impala.properties_, but also values set in the _extra.locations_ property. It is also possible to get full control of the list using the _all.locations_ property.

For more details on this see BootstrapContexts.