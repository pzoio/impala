#summary Importing from and exporting to Impala service registry

Impala uses a service registry to share services (ordinarily, Spring beans) between modules. The service registry is a central registry
shared by the whole application to which services can be dynamically added and removed. Clients of the service registry can look up services
using a number of mechanisms, and can also register as listeners for service events.

It is very necessary for application code to interact directly with the service registry. Instead, you can take advantage of a number
of Impala Spring beans which are most easily configured using the Impala `service` namespace, new with Impala 1.0M6. The `service` namespace
provides a number of XML elements which you can use in your Spring application context XML file to export beans to and import beans from the 
service registry. It also takes care of the details of setting up proxies to imported services. These proxies manage the dynamic interactions with the
service registry, meaning that the complexity of these interactions is not imported into your application.

----

== Export elements ==

The following elements from the Impala service registry namespace are used to export beans from individual modules to the
Impala service registry.

=== 'export' element ===
Used to export an individual Spring bean as an Impala service. The `export` element allows you to 
add beans to the service registry which can be looked up by name, Java type, or published attributes.
  * `beanName` is the name of the bean being exported, resolved used `ApplicationContext.getBean(beanName)`
  * `exportName` is the name against which the bean is registered in the Impala service registry (enabling name based lookups using the import element)
  * `exportTypes` is a comma separated list of types against which the bean will be exported (enabling typed based lookups using the import element)
  * `attributes` is a set of attributes pairs, separated by default by line breaks or commas, with name and value separated by equals.

Beans of any Spring scope can be exported to the service registry. Additionally, beans backed by non-singleton
`FactoryBeans` can be exported. In the case of non-singleton beans or `FactoryBeans`, the service registry will hold
a reference to the underlying Spring context and bean name, allowing for on-demand lookup of the underlying service object.

=== 'export-array' element ===

Used to export an array of beans to the service registry. Beans will be exported by name.
  * `beanNames`: the names of the beans being exported
  * `exportNames`: the corresponding names against which the exported beans will be registered in the service registry.
  
Note that beans are not exported by any explicit type (as in the export `exportTypes` attributes), and not exported
using any explicit filter. This means that when using this form of export, bean lookup will typically be using the 
`import` element with the `exportName` specified.


=== 'auto-export' element ===

Used to automatically export beans to the service registry. It checks for the presence in beans in the parent (and dependent) application
contexts (that is, application contexts for parent and dependent modules) for beans which are service endpoints, created for example using
the `import` element. It then checks each bean in the current application context, and if its bean name corresponds with the endpoint's 
export name, it exports the bean using the current bean name as the export name.

In this way, the `auto-export` element provides a very easy way to contribute an implementation for a service endpoint defined in a parent
application context.

----

== Import elements ==

The following elements from the Impala service registry namespace are used to export beans from individual modules to the
Impala service registry. The underlying service object is wrapped by an Impala proxy. This insulates the client from 
complexity arising from the dynamic nature of the service registration and removal, the possibly dynamic scope of the beans
themselves.

=== 'import' element ===

Used to import an individual Spring bean from the Impala service registry. 
Basically, there are three ways of importing beans. First, by name, corresponding with a name used to register a bean into the service
registry. Second, by type, corresponding with types used to register a bean in the service registry.
Third, by filter, in which case the service must have been exported using attributes which match the filter expression.

The following attributes apply:
  * `filterExpression`: if not null, then used to look up the service as an entry which matches the filter
  * `exportName`: if not null, and filterExpression is null, then used to look up service as a named entry
  * `exportTypes`: if both filterExpression and exportName are null, then used to look up service as a typed entry. Even if `filterExpression` or `exportName` is specified, then if `exportTypes` is present it is used to limit the candidate services to those which were exported using all of the specified set of export types. 
  * `proxyTypes`: must be present if exportTypes is not. If present, then the `proxyTypes` are used to create the proxy to the service which is passed to client users of the service. If not present, then the export types (from the `exportTypes` attribute) are also used as the proxy types.

=== 'list' element ===

Used to create a `java.util.List` which is backed by Impala service registry entries.

The following attributes apply:
  * `filterExpression`: used to filter services which are eligible for adding to the list
  * `exportTypes`: if exportTypes is present it is used to limit the candidate services to those which were exported using all of the specified set of export types. 
  * `proxyTypes`: if present, then the proxyTypes are used to create the proxy to the service for each entry in the map. If not present, then the export types (from the `exportTypes` attribute) are also used as the proxy types. If neither is present, then Impala will attempt to create a CGLIB proxy of the class.

Note that Spring beans of non-singleton scope (e.g. `prototype`), or beans backed by 
non-singleton `FactoryBeans` are not supported. Impala will simply filter these beans out 
so that they will not be included in the list, even if they match using one or more of the
other attributes.

=== 'map' element ===

Used to create a `java.util.Map` which is backed by Impala service registry entries.

The following attributes apply:
  * `filterExpression`: used to filter services which are eligible for adding to the list
  * `exportTypes`: if exportTypes is present it is used to limit the candidate services to those which were exported using all of the specified set of export types. 
  * `proxyTypes`: if present, then the proxyTypes are used to create the proxy to the service for each entry in the map. If not present, then the export types (from the exportTypes attribute) are also used as the proxy types. If neither is present, then Impala will attempt to create a CGLIB proxy of the class.
  * `mapKey`: the service attribute used as the key for the map. By default this will be 'mapkey'

Note that, as with the `list` element, 
Spring beans of non-singleton scope (e.g. `prototype`), or beans backed by non-singleton `FactoryBeans` are not supported. Impala will simply filter these beans out so that they will not be included.
