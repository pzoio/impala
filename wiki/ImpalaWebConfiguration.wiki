#summary How to configure Impala runtime in web application

== Simple Startup ==

For vanilla Spring web applications, using a `ContextLoader` instance set up using a `ContextLoaderListener` in the web application's _web.xml_.

For Impala, the mechanisms is similar with a `ContextLoaderListener` subclass being used:

{{{
<listener>
	<listener-class>org.impalaframework.web.loader.ImpalaContextLoaderListener</listener-class>
</listener>
}}}

Impala startup works very similarly to regular Spring applications. The big difference is that the `ContextLoader` subclass does not bootstrap the application directly. Instead, it bootstraps the Impala runtime (itself just a set of Spring beans), which itself if responsible for loading the modules which comprise your application.

== Advanced Startup ==

With Impala, it's straightforward to vary the `ContextLoader` subclass which is used to bootstrap Impala in a web environment. Simply 
add an extra entry into _web.xml_.

{{{
<context-param>
	<param-name>contextLoaderClassName</param-name>
	<param-value>my.context.loader.subclass.name</param-value>
</context-param>	
}}}

If this element is not present, the default is assumed to be `ExternalModuleContextLoader`.

Changing the `ContextLoader` is appropriate if you want to modify the actual mechanism for bootstrapping Impala in a web application.
If you are happy with this mechanism, but you want to vary the details of the Impala runtime configuration, the next section explains how this is done.

== Impala Configuration Options ==

There are two choices for configuring Impala. The simplest, new from Impala 1.0M5, involves setting values for built-in *Impala configuration properties*.
This is primarily useful for tailoring the existing Impala capabilities to suit your application's requirements. If you want to extend the capabilities 
of the framework itself, the way to supply the Impala bootstrapping process with an alternative or enhanced set of Spring context locations. The latter
approach is of course only suitable for advanced users.

=== Property Based Configuration ===

==== Core Properties ===

The following properties are relevant for both standalone and web Impala runtime environments.

*all.locations	*: A comma or space separated list of context locations. If this property is set, then other properties which would otherwise
be used to determine which Impala application context XML files to include will be ignored. The value set in this file is taken as
the truth. Note that if the value does not end in .xml, the it is assumed to take the form impala-suppliedname.xml. In other words,
_impala-_ is used as a prefix, and _.xml_ is used as a suffix.
	 
*bootstrapLocations*: An alias for all.locations.
	 
*extra.locations*: Used to add additional context locations. Use when you want simply want to add one more context locations to the set which would 
otherwise be used. Note that if the value does not end in .xml, the it is assumed to take the form impala-suppliedname.xml. In other words,
_impala-_ is used as a prefix, and _.xml_ is used as a suffix.
	 
*classloader.type*: The module management type to be used. Permissible values are _shared_, _hierarchical_ and _graph_. 
The default value is _graph_.
	 
*graph.bean.visibility.type*: Indicates the visibility type of Spring beans when using the graph class
loader. Permissible values are _none_, _graphOrdered_,
_parentFirst_ and _parentOnly_.
	
*parent.classloader.first*: This is used to specify whether Impala should attempt to load classes by first checking the application or system class path, 
before examining the module class path. The default is _true_.

----
==== Web Properties ===

The following properties are relevant when running Impala as a web application.

*auto.reload.modules*: Whether modules should be automatically reloaded if the file/directory
containing the modules has modified. If true, a background thread will
monitor module files/folders and automatically reload modules when
changes are detected. Default is `false`.
	
*partitioned.servlet.context*: Whether `ServletContext` attributes and resources should be partitioned
across modules. This makes it possible to set attributes and make resources
visible within modules only through {@link ServletContext} methods.
	 
*session.module.protection*: Attempt to protect session state when module is reloaded. If class loader
which loaded original object in session is replaced, the object in
session will no longer be visible to application code once module is
reloaded. The solution is to clone the object via Java serialization,
replacing the class loader of session object during the cloning process.
The cloned object is then added to the session in place of the old object
with the stale class loader.
	 
*embedded.mode*: This property must be set to true if you want to run a web application
embedded within the IDE, without any specific packaging required.
Suitable for a fast develop/deploy/test cycle. The alternative involves
creating a war file with modules placed in jars files in
_WEB-INF/modules_. This is the default, and is the valid production
setting.
	 
*preserve.session.on.reload.failure*: If a session attribute is lost because it cannot be "reloaded" maintain the 
existing session. Default is `true`.
	 
*spring.path.mapping.enabled*:

*web.module.prefix*:
	
*top.level.module.suffixes*:

----

==== JMX Properties ===

*expose.jmx.operations*:

*expose.mx4j.adaptor*:

*jmx.adaptor.port*:

----
	 
==== Build Properties ===	 
	
The following properties relate to the Impala build configuration. Unlike the other property sets above, they are set in _build.properties_.	
	
*workspace.root*: The module root directory, used as the base location when looking for module jars or directories.
	 
*module.class.dir*: The directory or jar relative to `workspace.root` in which to find modules.

*module.test.dir*: The version of the application. Used, for example, when searching for module jar files. For example, if version is 1.1
then `mymodule` may be found in a jar file called `mymodule-1.1.jar`.


=== Adding/modifiying the bootstrap Spring context locations ===

An advanced user of Impala may want to introduce new functionality or customise the way that Impala is loaded.
Here, you have two choices. You can add to the existing set of Impala Spring context locations using the _extra.locations_ property.
Alternatively, you can specify precisely which Impala bootstrap context locations will be used, using the _all.locations_ property.
In this case, any other configuration settings you may have applied will be ignored for the purposes of selecting 
Impala bootstrap Spring context locations.
Prior to Impala 1.0M5 explicit choice of bootstrap locations was the only one available for configuring Impala startup locations.
This approach is not recommended, however, for the typical user, and even for the advanced user, a combination of Configuration Properties
and _extra.locations_ would be the preferred approach.

The example below show the use of the _all.locations_ property, which we explain in a bit more detail next.
Note that prior to Impala 1.0M5, the property `all.locations` was named `bootstrapLocations`.

{{{
all.locations=bootstrap,web-bootstrap,jmx-bootstrap,web-jar-module-bootstrap
application.version=SNAPSHOT
}}}

The `all.locations` property can be used to fine tune the Spring context locations, as a comma separated list. 
The first entry in this list corresponds with the entry _META-INF/impala-bootstrap.xml_.
Note that there is a convention that is used which makes listing more concise. if the entry ends with _.xml_, then the full entry is used as is.
However, if it does not, then it is assumed to have the prefix _META-INF/impala-_ and the suffix _.xml_.

The example above is based on modules deployed as jar files in the _WEB-INF/modules_ directory, using the convention _%MODULE_NAME%-%application.snapshot%. 
The _petclinic-hibernate_ module would in this example be found in _WEB-INF/modules/petclinic-hibernate-SNAPSHOT.jar_.

Of course, this scheme would not work running embedded
in Eclipse with modules deployed directly as expanded folders on the file system
The configuration required for this setup is contained in 
`impala-embedded.properties`, also taken from the Petclinic sample:

{{{
#This entry is suitable for auto-reloading
all.locations=bootstrap,web-bootstrap,jmx-bootstrap,web-listener-bootstrap

#This entry is suitable for using the MX4J console
#all.locations=bootstrap,web-bootstrap,jmx-bootstrap,jmx-adaptor-bootstrap,web-jmx-bootstrap

#This entry allows JMX access via JConsole only
#all.locations=bootstrap,web-bootstrap,jmx-bootstrap,web-jmx-bootstrap
}}}

Notice that there are three configurations setup in this file, although obviously only one is active.
The first supports monitoring of module directories for changes, and automatic redeployment of modules.
The second supports module reloading through a JMX console. It also fires up a MX4J web console which can be used for this purpose.
The third option supports JMX reloading of modules, but does not start up the MX4J web application. The built-in JConsole can still be
used, however.

So how do we tell Impala to use `impala-embedded.properties` instead of the default `impala.properties`? 
The answer is found in the class `StartServer`, which is used to start up the Jetty server embedded in Eclipse:

{{{
public class StartServer {
	public static void main(String[] args) {
		System.setProperty("org.mortbay.log.class", StdErrLog.class.getName());
		System.setProperty(WebConstants.BOOTSTRAP_LOCATIONS_RESOURCE_PARAM, "classpath:impala-embedded.properties");
		StartJetty.main(new String[]{"8080", "../petclinic-web/context", "/petclinic-web"});
	}
}
}}}

The system property `bootstrapLocationsResource` is used for this purpose.

=== Configuration Files ===

A list of the Spring configuration files used to set up Impala in a web application are as follows:

  * _impala-bootstrap.xml_: sets up the core Impala runtime.
  * _impala-graph-bootstrap.xml_: adds graph-based module support to Impala. Without this file present, only hierarchical modules and class loaders are supported.
  * _impala-web-bootstrap.xml_: adds web application support to Impala. This allows, for example, for modules to be `ServletContext`-aware.
  * _impala-web-moduleaware.xml_: adds module awareness to `ServletContext`, `HttpServletRequest` and `HttpSession` classes. This allows, for example, partitioning of `ServletContext` state by module, and for `HttpSession`s objects created within reloaded modules to survive across module reloads.
  * _impala-jmx-bootstrap.xml_: adds JMX support so that modules can be reloaded via interaction with a JMX console.
  * _impala-jmx-adaptor-bootstrap.xml_: adds functionality can be accessed via MX4J's web JMX console. If this file is not present, but _impala-jmx-bootstrap.xml_ is present, then a remote JMX console needs to be used (for example, JConsole).
  * _impala-web-listener-bootstrap.xml_: adds resource monitoring functionality which automatically reloads modules when detecting file system changes.
  * _impala-osgi-bootstrap.xml_: overrides core functionality to use OSGi class loader and runtime instead of Impala's native runtime. This feature is still experimental at this point.

*Note*: for Impala 1.0M5 a simpler configuration mechanism will overlay the existing one which allows users to specify Impala configurations using 
pre-defined properties. See [http://code.google.com/p/impala/issues/detail?id=118 issue 118].