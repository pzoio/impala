#summary How to configure Impala runtime in web application

== Web Applications ==

=== Simple Startup ===

For vanilla Spring web applications, using a `ContextLoader` instance set up using a `ContextLoaderListener` in the web application's _web.xml_.

For Impala, the mechanisms is similar with a `ContextLoaderListener` subclass being used:

{{{
<listener>
	<listener-class>org.impalaframework.web.loader.ImpalaContextLoaderListener</listener-class>
</listener>
}}}

Impala startup works very similarly to regular Spring applications. The big difference is that the `ContextLoader` subclass does not bootstrap the application directly. Instead, it bootstraps the Impala runtime (itself just a set of Spring beans), which itself if responsible for loading the modules which comprise your application.

=== Advanced Startup ===

With Impala, it's straightforward to vary the `ContextLoader` subclass which is used to bootstrap Impala in a web environment. Simply 
add an extra entry into _web.xml_.

{{{
<context-param>
	<param-name>contextLoaderClassName</param-name>
	<param-value>my.context.loader.subclass.name</param-value>
</context-param>	
}}}

If this element is not present, the default is assumed to be `ExternalModuleContextLoader`.

Changing the `ContextLoader` is appropriate if you want to modify the actual mechanism for bootstrapping Impala in a web application.
If you are happy with this mechanism, but you want to vary the details of the Impala runtime configuration, you have two choices depending on what you want to achieve.

== Impala Configuration Options ==

TODO: INTRODUCE THE IMPALA BOOTSTRAP CONFIG OPTIONS

=== Impala Configuration Parameters ===

TODO: DESCRIBE THE BUILT IN CONFIG PARAMETERS

=== Adding/modifiying the bootstrap Spring context locations ===

By default, the Impala context loader looks for a file called `impala.properties` on the web application class path. An example is shown below, 
taken from the [SamplesPetclinic Petclinic sample]:

{{{
bootstrapLocations=bootstrap,web-bootstrap,jmx-bootstrap,web-jar-module-bootstrap
application.version=SNAPSHOT
}}}

The `bootstrapLocations` property can be used to fine tune the Spring context locations, as a comma separated list. 
The first entry in this list corresponds with the entry _META-INF/impala-bootstrap.xml_.
Note that there is a convention that is used which makes listing more concise. if the entry ends with _.xml_, then the full entry is used as is.
However, if it does not, then it is assumed to have the prefix _META-INF/impala-_ and the suffix _.xml_.

The example above is based on modules deployed as jar files in the _WEB-INF/modules_ directory, using the convention _%MODULE_NAME%-%application.snapshot%. 
The _petclinic-hibernate_ module would in this example be found in _WEB-INF/modules/petclinic-hibernate-SNAPSHOT.jar_.

Of course, this scheme would not work running embedded
in Eclipse with modules deployed directly as expanded folders on the file system
The configuration required for this setup is contained in 
`impala-embedded.properties`, also taken from the Petclinic sample:

{{{
#This entry is suitable for auto-reloading
bootstrapLocations=bootstrap,web-bootstrap,jmx-bootstrap,web-listener-bootstrap

#This entry is suitable for using the MX4J console
#bootstrapLocations=bootstrap,web-bootstrap,jmx-bootstrap,jmx-adaptor-bootstrap,web-jmx-bootstrap

#This entry allows JMX access via JConsole only
#bootstrapLocations=bootstrap,web-bootstrap,jmx-bootstrap,web-jmx-bootstrap
}}}

Notice that there are three configurations setup in this file, although obviously only one is active.
The first supports monitoring of module directories for changes, and automatic redeployment of modules.
The second supports module reloading through a JMX console. It also fires up a MX4J web console which can be used for this purpose.
The third option supports JMX reloading of modules, but does not start up the MX4J web application. The built-in JConsole can still be
used, however.

So how do we tell Impala to use `impala-embedded.properties` instead of the default `impala.properties`? 
The answer is found in the class `StartServer`, which is used to start up the Jetty server embedded in Eclipse:

{{{
public class StartServer {
	public static void main(String[] args) {
		System.setProperty("org.mortbay.log.class", StdErrLog.class.getName());
		System.setProperty(WebConstants.BOOTSTRAP_LOCATIONS_RESOURCE_PARAM, "classpath:impala-embedded.properties");
		StartJetty.main(new String[]{"8080", "../petclinic-web/context", "/petclinic-web"});
	}
}
}}}

The system property `bootstrapLocationsResource` is used for this purpose.

=== Configuration Files ===

A list of the Spring configuration files used to set up Impala in a web application are as follows:

  * _impala-bootstrap.xml_: sets up the core Impala runtime.
  * _impala-graph-bootstrap.xml_: adds graph-based module support to Impala. Without this file present, only hierarchical modules and class loaders are supported.
  * _impala-web-bootstrap.xml_: adds web application support to Impala. This allows, for example, for modules to be `ServletContext`-aware.
  * _impala-web-moduleaware.xml_: adds module awareness to `ServletContext`, `HttpServletRequest` and `HttpSession` classes. This allows, for example, partitioning of `ServletContext` state by module, and for `HttpSession`s objects created within reloaded modules to survive across module reloads.
  * _impala-jmx-bootstrap.xml_: adds JMX support so that modules can be reloaded via interaction with a JMX console.
  * _impala-jmx-adaptor-bootstrap.xml_: adds functionality can be accessed via MX4J's web JMX console. If this file is not present, but _impala-jmx-bootstrap.xml_ is present, then a remote JMX console needs to be used (for example, JConsole).
  * _impala-web-listener-bootstrap.xml_: adds resource monitoring functionality which automatically reloads modules when detecting file system changes.
  * _impala-osgi-bootstrap.xml_: overrides core functionality to use OSGi class loader and runtime instead of Impala's native runtime. This feature is still experimental at this point.

*Note*: for Impala 1.0M5 a simpler configuration mechanism will overlay the existing one which allows users to specify Impala configurations using 
pre-defined properties. See [http://code.google.com/p/impala/issues/detail?id=118 issue 118].