#summary How to set up module configuration

== Basic (Internal) Module Configuration ==

The easiest way to set up a module is through the file _module.properties_. Each module configured in this way will have _module.properties_ sitting
in the root directory of the module's class path. In practice, this means placing _module.properties_ in the module's _resources_ folder.

=== module.properties ===

An example of _module.properties_ is shown below:

{{{
parent=petclinic
type=servlet
context-locations=petclinic-web-context.xml
}}}

This example is taken from the web module definition of the Impala Petclinic application.

*_parent_:* The name of the parent module. This property is required for all modules apart from the root module. 
Remember that each module typically is backed both by its own class loader, and it's own Spring application context.
The relationship between the child
and the parent typically applies both for the class loader and the application context. This means that classes defined in the parent
module are visible to child modules, but not vice versa. Similarly, beans accessible through the parent's `ApplictionContext` are accessible to 
beans in the child's `ApplicationContext`, and not vice versa.

*_type_:* The type of the module. The type of the module governs both the mechanism for loading module definitions, and the mechanism for loading the module, that is
the resources for the module as well as its `ApplicationContext`.

The following types are available out of the box:

||_root:_ || Associated with the root module. This may be backed by the system class or application class loader, or by an Impala custom class loader, depending on the configuration. It will also be backed by a Spring `GenericApplicationContext`.||
||_application:_ || The module type used for most other non-web modules. Typically backed by an Impala custom class loader and a Spring `GenericApplicationContext`.||
||_application_with_beansets:_ || Impala includes a mechanism for overriding bean import definitions in quite a sophisticated way, which can be easily customised via an external configuration. For small to medium-sized modules, this feature is unlikely to be useful.||
||_servlet_:|| This is Impala's main form of web module. It is backed by a `GenericWebApplicationContext` instance, and by an Impala custom class loader. Web modules can be arranged in a hierarchy. However, there can only be one 'root' web module. This module will also contain web application files, such as the _WEB-INF/web.xml_ as well CSS styles, images, etc.||
||_web_root_:|| Similar to the _servlet_ module. There are two main differences. Firstly, _servlet_ modules follow the convention of having Spring configuration files located as class path resources, while _web_root_ modules are found as servlet context resources, that is, relative to the `ServletContext` root directory. The first is consistent with Impala's typical usage, while the latter is closer to the convention of vanilla Spring applications, which use the _servlet-name_ plus _servlet_ suffix convention to locate Spring config files.||
||_web_placeholder_: || This is a special type of module which can be used in some configurations to 'turn off' the functionality that would otherwise be provided by a servlet module. The usage of this type of module is explained in WebConfiguration.||

*_context-locations_:* A comma-separated list of Spring configuration files which make up the bean definitions for the module. Not required -
if not specified the name _%MODULE_NAME%-context.xml_ is assumed.

The properties listed above are the most commonly used properties. It should be noted that more esoteric module types may use other properties. An example
is the property _root-project-names_, which can be used for a _root_ module to indicate that this should consist of the contents of multiple projects. 
For most use cases, the module types and _module.properties_ names described above should be sufficient.

The type of module configuration described in this section is also know as an *internal module configuration*, because all of the information required
to describe the module's position in the module hierarchy is contained within the module. 
This is also the simplest and most reusable configuration. 
The module configuration for the application as a whole can be expressed by simply listing the names of the modules.
An example is the module configuration for the [[SampleWebframeworks web frameworks sample]]:

{{{
<parent>
	<names>
	webframeworks
	webframeworks-service
	webframeworks-web
	webframeworks-struts
	webframeworks-wicket
	webframeworks-tapestry5
	</names>
</parent>
}}} 

The snippet above shows an example of the contents of the _moduledefintions.xml_ file, which used for 
setting up the module hierarchy in a web application.

== External Configuration ==

While the internal configuration is generally pretty convenient, there are times 
when you won't simply wish to reuse the default internal module configuration in its entirety.

Suppose, for example, one of your modules consist of a set of JMX Spring beans which you may wish to use in some
environments but not others. One approach to this problem would be to split these beans into a separate module. However, in some cases this 
may seem like overkill, and if followed through, could lead to an explosion in the number of modules. 

In plain Spring applications, functionality is often turned on or off by the inclusion or otherwise of Spring application context files. This same approach can 
be applied within a module, by externally overriding the _context-locations_ property.

In the example below, we are using the _moduledefinitions.xml_ to add an additional context location to the _example-web_ module. Of course,
the _extra-location.xml_ file needs to be present for this example to work.

{{{
<root>
	<names>
	example-hibernate
	example-dao
	example-service
	example-web
	example-servlet1
	example-servlet2
	example-servlet3
	example-servlet4
	</names>
	<modules>	
		<module>
			<name>example-web</name>
			<context-locations>
				<context-location>example-web.xml</context-location>
				<context-location>extra-location.xml</context-location>
			</context-locations>
		</module>
	</modules>
</root>
}}}

For each module type, any of the properties can be overridden this way. This is because each module type-specific definition reader can read
module properties both from simple properties (as in a Java properties file), or from an XML definition document.

== Specifying module definitions globally with `ModuleDefinitionSource` ==

There are essentially two parts to applying an overall module configuration:
  # how modules should be defined internally (type, context locations, etc.)
  # which modules should be included as part of the application
  
In the preceeding sections, we determined that most of the former role can be performed using the _module.properties_ file. 
We also saw example of how the modules to be included in an application could simply be listed in an _moduledefinitions.xml_
and that the latter file could also be responsible for all or part of the specifing modules' internal configurations.

The question you may be asking is how does this all fit together, and when are the different mechanisms used?

The key to all of this is the interface `ModuleDefinitionSource`. This interface defines a strategy for loading module definitions.
The module definition hierarchy can be loaded by any implementation of `ModuleDefinitionSource`. Remember, module definitions are metadata. 
When you load a module definition, you are not loading the module, just an abstract representation of what the module is supposed to contain.

There are a number of implementations of `ModuleDefintionSource`. Which implementation is best to use depends on the circumstances.

The _moduledefinitions.xml_ is used with `XmlModuleDefinitionSource` as convenient for web applications, because it can be implemented through 
simply placing an XML file on the web application class loader's class path (for example, in _WEB-INF\classes).

For integration tests, it's easier to implement `ModuleDefinitionSource` in code the test directly. Here's an example:

{{{
public class EntryDAOTest implements ModuleDefinitionSource {

	public static void main(String[] args) {
		InteractiveTestRunner.run(EntryDAOTest.class);
	}
	
	protected void setUp() throws Exception {
		//update the module hierarchy as required
		Impala.init(this);
	}
	
	public void testDAO() {
		EntryDAO dao = Impala.getBean("entryDAO", EntryDAO.class);
		... do a bunch of tests on the DAO
	}

	public RootModuleDefinition getModuleDefinition() {
		return new TestDefinitionSource(new String[]{"example-dao", "example-hibernate"}).getModuleDefinition();
	}
}
}}}

The our example integration test is using an instance of `TestDefinitionSource`, where the names of modules required 
for the test are passed in an array. (In Impala 1.0M3, you would have to use `InternalModuleDefinitionSource`: see [Compatibility the compatibility page].

== Advanced ==

It's pretty straightforward to introduce new module types. You will need to override the `typeReaders` bean in the Impala Spring configuration, as well as the 
`moduleLoaders` property of the `moduleLoaderRegistry` Impala Spring bean.

For more information on how to do this, see ImpalaConfiguration.
