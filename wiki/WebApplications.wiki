#summary Impala Web Applications

Impala has a lot of features designed to make using and working with web applications as powerful and seamless as possible.
Impala provides flexible deployment options, and supports a large range of scenarios in enabling modular application development.

== Web deployment ==

Impala web applications can be launched in the Eclipse in an embedded Jetty Server. This is powerful, because it means that 
you can do all your web application development without having to run any build scripts. However, war based deployment is also supported.
For more information, see the [GettingStarted tutorial].

== Features ==

Below are some of Impala's web application development features:

  * *modular web applications*: we have the advantages of modularity available for the web tier of our applications just as with any other tier. 
  * *dynamic reloading support for other frameworks*: Impala provides the support not only for Spring MVC-based web applications, but for web applications written using arbitrary Java web frameworks (see the bottom of the page for a caveat on this)
  * *objects held in the `HttpSession` should survive module reloads*, even if the class loader used to load the object originally saved in the session is discarded. See below in this page for more details. 
  
== Impala Web Development Documentation ==

[WebApplicationBootstrapping Bootstrapping web applications]. 

[WebApplicationStructure Anatomy of an Impala web application]. 
Describes briefly how different Impala configuration files are used during Impala and application load process.  

[WebMultiModuleApplications Multi-module web application development]
  * [WebXmlHandlerRegistration Web XML based servlet and filter registration]
  * [WebModuleBasedHandlerRegistration Module based servlet and filter registration]

[ServletsAndFilters Impala servlets and filters]

[WebSessionManagement Session management with module reloads]

[WebThirdPartyFrameworks Third party frameworks support]





  