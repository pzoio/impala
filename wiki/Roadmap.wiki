#summary Roadmap

= Impala Roadmap =

The following gives an outline of some of the features which are envisaged, by release.

== Impala 1.0 M1 ==

  * *Interactive test runner:* a Java main application which can load, update and reload modules, as well as run tests.
  * *Suite test runner:* support for efficient, rapid running of a suites of integration 
  * *Simple scaffolding*, allowing building of new projects. See [GettingStarted Getting Started].
  * *Eclipse web application runner* (using Jetty), allowing multi-module web applications to be developed without builds.
  * *War deployment build* - supporting creation of war files which can be deployed in a standard JEE application server or servlet container.
  * *Non-war deployment build* for Jetty - a specialised deployment structure with an embedded Jetty server.
  * *Internal refactoring* to remove wrinkles in architecture.
  * *Spring MVC integration* with support for multi-module, dynamically reloadable web applications being built using Spring MVC.
  * *JUnit 3.8* support, specifically in the interactive test runner.
  * *Automatic module updates* using a file system modification detector.
  * *Manual module updates* using JMX administration console.
  * *Deployment build* with automatic tagging of release versions.
  * *Ant-based build system* which can be used in Impala-based applications.
  
As of April 9, 2008, these features have all been implemented.

== Impala 1.0 ==

Some of the features will be delivered in intermediate milestones prior to the final 1.0.

  * *Service registry API*, allowing service beans to be contributed from modules to a service registry (similar to OSGi).
  * *IDE integration* (IntelliJ, Netbeans). Currently, Eclipse is explicitly supported, for example, in the documentation, samples and scaffolding. It would be good to provide support for IntelliJ, Netbeans and potentially JDeveloper.
  * *Better maven support*. The idea here would be to allow Maven users to build Impala applications using Maven, and to structure projects according to Maven document structure conventions.
  * *Extensions to !JMX administration capability*
  * *More documentation*
  * *_Whistle and bells_ samples*
  * *Web framework integration*
  * *JUnit 4.0 support*

== Post 1.0 ==

  * *Investigate OSGi*
  * *Further web framework integration*
  * *Better GUI tools* for visualising and administering modules at runtime.