#summary Roadmap
#labels Featured

= Impala Roadmap =

The following gives an outline of some of the features which are envisaged. The features listed for 1.0 M1 have essentially been implemented. Features for 1.0 and after are still up for negotiation/consideration, based on the needs and contributions of users. 

== Impala 1.0 M1 ==

  * *Interactive test runner:* a Java main application which can load, update and reload modules, as well as run tests.
  * *Suite test runner:* support for efficient, rapid running of a suites of integration tests. 
  * *Simple scaffolding*, allowing building of new projects. See [GettingStarted Getting Started] for more deal.
  * *Eclipse web application runner* (using Jetty), allowing multi-module web applications to be developed without builds.
  * *War deployment build* - supporting creation of war files which can be deployed in a standard JEE application server or servlet container.
  * *Non-war deployment build* for Jetty - a specialised deployment structure with an embedded Jetty server.
  * *Internal refactoring* to remove wrinkles in architecture.
  * *Spring MVC integration* with support for multi-module, dynamically reloadable web applications being built using Spring MVC.
  * *JUnit 3.8* support, specifically in the interactive test runner.
  * *Automatic module updates* using a file system modification detector.
  * *Manual module updates* using JMX administration console.
  * *Deployment build* with automatic tagging of release versions.
  * *Ant-based build system* which can be used in Impala-based applications.
  
These features have been implemented.

== Impala 1.0 ==

Some of the features will be delivered in intermediate milestones prior to the final 1.0. Most of these features should be included in the 1.0 release.

  * *Extensions to the *Service registry API*, by which service beans are contributed from modules to a service registry (similar to OSGi).
  * *Support for various Spring bean scopes. Current support exists only for Spring singleton beans to be exported to and imported from Impala's service registry.
  * *IDE integration* (IntelliJ, Netbeans). Currently, Eclipse is explicitly supported, for example, in the documentation, samples and scaffolding. It would be good to provide support for IntelliJ, Netbeans and potentially JDeveloper.
  * *OSGi compliance, allowing Impala jars to be used in an OSGi environment.
  * *Better maven support*. The idea here would be to allow Maven users to build Impala applications using Maven, and to structure projects according to Maven document structure conventions.
  * *Extensions to JMX administration capability*. Currently, JMX can be used for certain administration functions. The idea would be to extend this capability, and also improve on the range and sophistication of JMX deployment options.
  * *More documentation*.
  * *_Whistle and bells_ samples*. Impala really shines when dealing with large applications with complex configuration requirements. It would be great to have a more advanced sample application which demonstrates it's capabilities.
  * *Self-contained module definitions, allowing module definitions to be specified internally within modules.
  * *Web framework integration*. Currently, Spring MVC is supported out the box. Support should be added for other frameworks which allow this (via sufficient control over class loading mechanism or a native reloading capability).
  * *JUnit 4.0 support*. Specifically, the interactive test runner should be usable with JUnit 4.0-based tests. 
  * *Minor improvements to Impala's scaffolding features.

== Post 1.0 ==

These features are at the speculation stage, and are subject to refinement and review.

  * *Investigate OSGi*. There is potentially a natural affinity with OSGi which should be explored, potentially via an integration with Spring DM.
  * *Integration with Grails. Either with Impala embedded within Grails, Grails embedded within Impala, or both.
  * *Further web framework integration*. Target additional web frameworks not covered in 1.0 release.
  * *Support for module dependencies as graphs (allowing individual modules to depend on multiple modules rather than just a single parent).
  * *Further extensions to the JMX support.
  * *Module plugins. The idea here is to provide a packaging structure which will allow for chunks of reusable functionality to be packaged and deployed in an Impala application as modules.
  * *New deployment options, for example via Amazon's EC2 service.
  * *Better GUI tools* for visualising and administering modules at runtime.
  * *Eclipse plugin for interactive test runner.