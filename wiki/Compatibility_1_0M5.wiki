#summary Migration - incompatible changes from 1.0M4 to 1.0M5

=== Reduced unnecessarily coupling with Spring framework (Ticket #117 ) ===

`RuntimeModule` interface added. `ModuleStateHolder` methods 

{{{
ConfigurableApplicationContext getRootModuleContext();
ConfigurableApplicationContext getModule(String name);
Map<String, ConfigurableApplicationContext> getModuleContexts();
void putModule(String name, ConfigurableApplicationContext context);
ConfigurableApplicationContext removeModule(String name);
}}}

have been renamed to

{{{
RuntimeModule getRootModule();
RuntimeModule getModule(String name);
Map<String, RuntimeModule> getRuntimeModules();
void putModule(String name, RuntimeModule context);
RuntimeModule removeModule(String name);
}}}

----

`ApplicationContextLoader` moved from `org.impalaframework.module` to `org.impalaframework.module.spring`.

----

`ModuleLoader` interface split into `ModuleLoader` and `SpringModuleLaoder`.
Implementation classes moved to `org.impalaframework.module.spring.loader`.

----

Package `org.impalaframework.bean` has been moved to `org.impalaframework.spring.bean`.

----

Moved Spring-related classes from dynamic property framework to `org.impalaframework.spring.config`:

{{{
DynamicPropertiesFactoryBean.java
DynamicPropertySource.java
ExternalDynamicPropertySource.java
}}}

----

Split ModuleLoaderRegistry into ModuleLoaderRegistry and DelegatingContextLoaderRegistry. The DelegatingContextLoaderRegistry
holds DelegatingContextLoaders, which are Spring-specific.

Moved DelegatingContextLoader interface to `org.impalaframework.module.spring`.

----

Moved TypeReaderRegistryFactoryBean to org.impalaframework.module.spring.type

---- 

All service exporter classes have been moved to org.impalaframework.spring.service.exporter. These include:

{{{
ModuleArrayContributionExporter.java
AutoRegisteringModuleContributionExporter.java
BaseModuleContributionExporter.java
ModuleContributionPostProcessor.java
ModuleContributionUtils.java
ServiceArrayRegistryExporter.java
ServiceRegistryExporter.java
}}}

*NOTE: this change is likely to break backward compatibility for most clients.*

*Area affected:* Impala-export definitions in Spring configuration file.

----

`ContributionProxyFactoryBean` moved from `org.impalaframework.spring.module` to 
`org.impalaframework.spring.service.proxy`.

*NOTE: this change is likely to break backward compatibility for most clients.*

*Area affected:* Impala-export definitions in Spring configuration file.

----

Package `org.impalaframework.module.spring` renamed to `org.impalaframework.spring.module`.
Applies for subpackages.

----

Impala no longer directly uses Spring application context. It instead exposes a ModuleRuntime object which could be a SpringModuleRuntime instance.

Hence the following methods have changed:

{{{
public static ApplicationContext getRootContext()
public static ApplicationContext getModuleContext(String moduleName)
}}}

{{{
public static RuntimeModule getRootRuntimeModule()
public static RuntimeModule getRuntimeModule(String moduleName)
}}}

----

Package `org.impalaframework.web.config` renamed to `org.impalaframework.web.spring.bean`.

Affects: `SystemPropertyServletContextParamFactoryBean`.

----

Spring related classes in `org.impalaframework.web.integration` have been moved to `org.impalaframework.web.spring.integration`.

Affects:
{{{
ExternalFrameworkIntegrationServlet.java
FilterFactoryBean.java
InternalFrameworkIntegrationFilter.java
InternalFrameworkIntegrationFilterFactoryBean.java
InternalFrameworkIntegrationServlet.java
InternalFrameworkIntegrationServletFactoryBean.java
ModuleProxyFilter.java
ServletFactoryBean.java
ModuleProxyServlet.java
}}}

*NOTE: this change is likely to break backward compatibility for web clients.*

*Area affected:* Impala servlet/filter definitions in Spring configuration files for web modules. Also _WEB-INF/web.xml_.

----

Package `org.impalaframework.web.loader` renamed to `org.impalaframework.web.spring.loader`.

This affects context loader related classes such as ImpalaContextLoaderListener.

*NOTE: this change is likely to break backward compatibility for web clients.*

*Area affected:* _WEB-INF/web.xml_.

---- 

Module loader related classes in `org.impalaframework.web.module` moved to `org.impalaframework.web.spring.module`.

Include:

{{{
RootWebModuleLoader.java
WebModuleLoader.java
WebPlaceholderModuleDefinition.java
WebRootModuleLoader.java
}}}

----

Moved `org.impalaframework.web.servlet` to `org.impalaframework.web.spring.servlet`.

Includes:

{{{
BaseImpalaServlet.java
ExternalModuleServlet.java
InternalModuleServlet.java
}}}

*NOTE: this change is likely to break backward compatibility for web clients.*

*Area affected:* Impala servlet/filter definitions in Spring configuration files for web modules. Also _WEB-INF/web.xml_.

=== ModuleDefinition and RootModuleDefinition should be moved to org.impalaframework.module (Ticket #131 ) ===

`ModuleDefinition`, `ModuleDefinitionSource` and `RootModuleDefinition` have been moved from
`org.impalaframework.module.definition` to `org.impalaframework.module`.

*NOTE: this change is likely to break backward compatibility in integration tests for most clients.*

*Area affected:* Integration Tests

=== Created new SPI package `org.impalaframework.module.spi` (Ticket #135)

The following interfaces are now part of new spi subpackage, moved from `org.impalaframework.module`.

{{{
ModificationExtractor.java
ModificationExtractorType.java
ModuleElementNames.java
ModuleLoader.java
ModuleRuntimeManager.java
ModuleStateChange.java
ModuleStateChangeListener.java
ModuleStateChangeNotifier.java
ModuleStateHolder.java
Transition.java
TransitionProcessor.java
TransitionSet.java
TypeReader.java
}}}

Note: this change is likely to affect Impala extension subclasses. Regular implementation classes will not be affected.
