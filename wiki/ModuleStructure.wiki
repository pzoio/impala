#summary Page describing the internal contents of different types of modules.

It is important to understand the role of the different files that are present in the modules. We'll use the Petclinic example application to show the internal structure of modules. The projects contained in the Petclinic example are shown below:

http://impala.googlecode.com/svn/wiki/images/petclinic_all.png

The Petclinic application has been divided into a main or root module (_petclinic_), two application modules (_petclinic-hibernate_ and _petclinic-service_), and a web module ( _petclinic-web_). A real world application would probably have quite a few more modules. Perhaps a dozen or so application modules, a root web module, and a number of servlet modules for dividing the web portion of the application into logic elements.

Notice also there are an additional two projects which are not modules. These are:

  * _petclinic-repository_: used to contain the third party libraries used for the application.
  * _petclinic-tests_: a convenience project whose primary purpose is to run the suites of tests for all modules as a single JUnit suite run within the IDE.

In the next section, we'll describe in a bit more detail the internal structure of each of the module types.

== Main or root module ==

The structure of the main module is shown below.

http://impala.googlecode.com/svn/wiki/images/petclinic_main_structure.png

The _src_ and _test_ folders contain (mostly Java) source and test files respectively, as with pretty much any other Java project. 
_resources_ contains additional resources for the project, such as the module's Spring configuration files (here simply _parent-context.xml_), as well as other resources which might need to be found on the classpath.

Note that the contents of both _src_ and _resources_ will end up in the same classes folder or Jar at runtime. Splitting them is just a convenience to 
allow you to separate Java source from other resources.

Files in _test_ are not intended to end up as module contents.

The project also contains _.classpath_ and _.project_ files: these are simply files used by the Eclipse IDE, not specific to Impala.

_build.properties_ and _build.xml_ are only useful if you are using Impala's ANT based build system. If you were using Maven or some other tool to build Impala, these files
would not be necessary. (Note that Maven support is not available provided by Impala, although there is no reason why a Maven enthusiast couldn't use Impala with Maven. They would have a bit of work to do, though. 

_dependencies.txt_ is only useful if you are using Impala's simple [DependencyManagement dependency management mechanism], which allows you to download dependencies with source from local or public Maven repositories (yes, we do use Maven after all!).

== Application module == 

The basic structure of an application module is identical to the root module. See below.

http://impala.googlecode.com/svn/wiki/images/petclinic_hibernate_structure.png

The application module has the same project layout, the same locations for configuration files, etc. 

Of course, the roles of individual files within the modules are different. 
The root module Spring configuration file tends to contain _interface_ beans or beans which are supposed be used by many modules.
The _build.properties_ and _build.xml_ have a larger role, not only in building the root project, but also in co-ordinating the builds of application and web modules,
while the contents of the application module build files reflect the fact that their main if not only job is to build their containing module.

== Web module ==

http://impala.googlecode.com/svn/wiki/images/petclinic_hibernate_structure.png