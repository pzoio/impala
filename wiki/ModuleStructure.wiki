#summary Page describing the internal contents of different types of modules.

It is important to understand the role of the different files that are present in the modules. We'll use the Petclinic example application to show the internal structure of modules. The projects contained in the Petclinic example are shown below:

http://impala.googlecode.com/svn/wiki/images/petclinic_all.png

The Petclinic application has been divided into a main or root module (petclinic), two application modules (petclinic-hibernate and petclinic-service), and a web module (petclinic-web). A real world application would probably have quite a few more modules. Perhaps a dozen or so application modules, a root web module, and a number of servlet modules for dividing the web portion of the application into logic elements.

Notice also there are an additional two projects which are not modules. These are:

  * petclinic-repository: used to contain the third party libraries used for the application.
  * petclinic-tests: a convenience project whose primary purpose is to run the suites of tests for all modules as a single JUnit suite run within the IDE.

In the next section, we'll describe in a bit more detail the 

== Main or root module ==

http://impala.googlecode.com/svn/wiki/images/petclinic_main_structure.png

== Application module == 

http://impala.googlecode.com/svn/wiki/images/petclinic_hibernate_structure.png

== Web module ==

http://impala.googlecode.com/svn/wiki/images/petclinic_hibernate_structure.png