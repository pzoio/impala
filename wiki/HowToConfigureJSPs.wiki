#summary Describes how to set up 'in-module' JSPs

== Background ==

When writing Java applications with JSP as the view technology, the normal practice is to put JSPs in the root context directory, so some subdirectory below this.
This works fine with Impala-based applications. However, when writing multi-module web applications, you typically want all your module resources to be
contained within the module. This includes !JavaScript files, CSS files, resources, etc. as well as JSPs.

With Freemarker and other view technologies, setting up view templates to be hosted within a web module is very straightforward.
With JSPs, it's a bit more complex, because typically JSP container is typically provided by the servlet container rather than the application itself.

With Impala, setting up JSPs is accomplished by embedding the Tomcat Jasper JSP engine into the application.

An example is in the [SamplesMaven Maven Sample]. If you look in the _maven-web_ module in this sample, you will find the JSP hosted in 
_maven-web/src/main/resources/maven/test.jspi_. The 'traditional' location for a JSP will be in _maven-host/src/main/webapp/maven_.

== Setup ==

*Note - this feature is available from Impala 1.0 RC3*

*1) Add the Tomcat Jasper runtime libraries into your application*

For example, from _dependencies.txt_:
{{{
jetty from tomcat:jasper-runtime:5.5.15 source=false
jetty from tomcat:jasper-compiler:5.5.15 source=false
jetty from tomcat:jasper-compiler-jdt:5.5.15 source=false
}}}

or 

{{{
provided from org.apache.tomcat:jasper:6.0.20
provided from org.apache.tomcat:jasper-el:6.0.20
provided from org.apache.tomcat:jasper-jdt:6.0.20
provided from org.apache.tomcat:juli:6.0.20
}}}

The equivalent for the latter is shown below:

{{{
<dependency>
	<groupId>org.apache.tomcat</groupId>
	<artifactId>jasper</artifactId>
	<version>6.0.20</version>
	<scope>provided</scope>
</dependency>
<dependency>
	<groupId>org.apache.tomcat</groupId>
	<artifactId>jasper-el</artifactId>
	<version>6.0.20</version>
	<scope>provided</scope>
</dependency>
<dependency>
	<groupId>org.apache.tomcat</groupId>
	<artifactId>jasper-jdt</artifactId>
	<version>6.0.20</version>
	<scope>provided</scope>
</dependency>
<dependency>
	<groupId>org.apache.tomcat</groupId>
	<artifactId>juli</artifactId>
	<version>6.0.20</version>
	<scope>provided</scope>
</dependency>	
}}}

*2) Add JSP support to the module using the following entry in your web module's application context XML file*

An example is shown below:

{{{
<bean id="jspServlet" class="org.impalaframework.web.jsp.JasperServletFactoryBean">
	<property name="servletName" value = "jspServlet"/>
</bean>
}}}

This registers a JSP servlet with the module, which JSP requests to your module can use to service requests.

3) Add the following entry to your application's _web.xml_ file.

{{{
<servlet>
    <servlet-name>JSP</servlet-name>
    <servlet-class>org.impalaframework.web.jsp.ModuleJspServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
</servlet>

<servlet-mapping>
	<servlet-name>JSP</servlet-name>
	<url-pattern>*.jsp</url-pattern>
</servlet-mapping> 
}}}

This allows the servlet container's request dispatcher to route forwarded requests to JSP's to your module-defined JSP servlet.

== Caveats ==

1) The usage mode which is supported in this integration allows JSPs to be accessed above only via forwards from within the application,
that is via `requestDispatcher.forward()`. This assumes that JSPs are not accessed directly elsewhere in the application. 
The reason the latter does not work is because of the _web.xml_ entry: by mapping to the URL pattern `*.jsp`, you have effectively overridden
the container's built-in support for JSPs.

If you do need to use vanilla JSPs, the workaround is to instead map to JSPs forwarded to within the application to another extension, such as `*.jspi`. You can 
You will then need to make changes to the application to ensure that when using JSPs, you forward requests on to 'pagename.jspi' instead of 'pagename.jsp'.
You can then use the *.jsp mapping in the normal way.

2) If you need to map directly using the JSP extension to JSPs hosted within a module, you can simply add a `module:to-handler` entry in your 
module's application context XML file. For example:

{{{
<web:to-handler extension = "jsp" servletName="jspServlet"/> 
}}}

3) Note that while the use of in-module JSPs is possible, other alternatives exist. For example, Spring has good support for 
[http://freemarker.sourceforge.net/ Freemarker], which 
can be used instead of JSPs. Freemarker even supports JSP tags (albeit with quite a different syntax). Using Freemarker or some other 
templating engine such as [http://velocity.apache.org/ Velocity] provides a simple alternative to JSPs which is less dependent on 
application server version, and less likely to 'step on the foot' of the application server. 