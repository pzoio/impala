#summary Explaining the getting started example

In a previous post I described the Impala scaffolding which can be used to set up and get going with a new Impala project. In this post, I will describe what is produced as part of this process, and how it fits together in an Impala application.
 
== Main (root module) ===

The interface definition.

{{{
package interfaces;

public interface MessageService {

	public String getMessage();
	
}
}}}

The example test.

{{{
package test;

import interfaces.MessageService;

import org.impalaframework.facade.Impala;
import org.impalaframework.module.builder.SimpleModuleDefinitionSource;
import org.impalaframework.module.definition.RootModuleDefinition;
import org.impalaframework.testrun.InteractiveTestRunner;

import test.BaseIntegrationTest;

public class MessageIntegrationTest extends BaseIntegrationTest {

	public static void main(String[] args) {
		InteractiveTestRunner.run(MessageIntegrationTest.class);
	}

	public void testIntegration() {
		MessageService service = Impala.getBean("messageService", MessageService.class);
		System.out.println(service.getMessage());
	}

	public RootModuleDefinition getModuleDefinition() {
		return new SimpleModuleDefinitionSource("wineorder",
				new String[] { "parent-context.xml" }, 
                                new String[] {"module1"}).getModuleDefinition();
	}

}
}}}

The Spring config file.

{{{
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       
	   xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd">
	
 <bean id="messageService" class="org.impalaframework.spring.module.ContributionProxyFactoryBean">
	 <property name = "proxyInterfaces" value = "interfaces.MessageService"/>
 </bean>
	
</beans>
}}}

== Module impelementation ===

`MessageService` implementation

{{{
package classes;

import interfaces.MessageService;

public class MessageServiceImpl implements MessageService {

	private String message;
	
	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

}
}}}

Spring config file

{{{
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

    <bean class = "org.impalaframework.spring.module.ModuleContributionPostProcessor"/>

	<bean id="messageService" class="classes.MessageServiceImpl">
		<property name = "message" value = "Hello World!"/>
	</bean>

</beans>
}}}

== Tests project ==

{{{
public class AllTests extends TestCase {
	public static Test suite() {
		TestSuite suite = new TestSuite();
		suite.addTestSuite(MessageIntegrationTest.class);
		suite.addTestSuite(ProjectMessageIntegrationTest.class);
		return suite;
	}
}
}}}

== Web project ==

Web.xml

{{{
<web-app>
	
	<display-name>Enter display name here</display-name>

	<description>Enter description here</description>
	
	<context-param>
		<param-name>contextLoaderClassName</param-name>
		<param-value>
                org.impalaframework.web.loader.ExternalModuleContextLoader
                </param-value>
	</context-param>

	<listener>
		<listener-class>
                org.impalaframework.web.loader.ImpalaContextLoaderListener
                </listener-class>
	</listener>
	
	<servlet>
		<servlet-name>web</servlet-name>
                <servlet-class> 
                org.impalaframework.web.servlet.ExternalModuleServlet 
                </servlet-class>
                <load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>web</servlet-name>
		<url-pattern>*.htm</url-pattern>
	</servlet-mapping>

	<session-config>
		<session-timeout>10</session-timeout>
	</session-config>

	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	
</web-app>
}}}