<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<xsd:schema xmlns="http://www.impalaframework.org/schema/service"
		xmlns:xsd="http://www.w3.org/2001/XMLSchema"
		xmlns:beans="http://www.springframework.org/schema/beans"
		targetNamespace="http://www.impalaframework.org/schema/service"
		elementFormDefault="qualified"
		attributeFormDefault="unqualified">

	<xsd:import namespace="http://www.springframework.org/schema/beans"/>

	<xsd:element name="export">
		<xsd:annotation>
			<xsd:documentation>
	Used to export an individual Spring bean as an Impala service. 
	- beanName is the name of the bean being exported, resolved used applicationContext.getBean(beanName)
	- exportName is the name against which the bean is registered in the Impala service registry (enabling name based lookups using the import element)
	- exportTypes is a comma separated list of types against which the bean will be exported (enabling typed based lookups using the import element)
	- attributes is a set of attributes pairs, separated by default by line breaks or commas, with name and value separated by equals 
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="id" type="xsd:ID"/>
			<xsd:attribute name="beanName" type="xsd:string" use="required"/>
			<xsd:attribute name="exportName" type="xsd:string" use="optional"/>
			<xsd:attribute name="exportTypes" type="xsd:string" use="optional"/>
			<xsd:attribute name="attributes" type="xsd:string" use="optional"/>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="import">
		<xsd:annotation>
			<xsd:documentation>
	Used to import an individual Spring bean from the Impala service registry. 
	Basically, there are three ways of importing beans. First, by name, corresponding with a name used to register a bean into the service
	registry. Second, by type, corresponding with types used to register a bean in the service registry.
	Third, by filter, in which case the service must have been exported using attributes which match the filter expression.
	
	The following attributes apply:
	- filterExpression: if not null, then used to look up the service as an entry which matches the filter
	- exportName: if not null, and filterExpression is null, then used to look up service as a named entry
	- exportTypes: if both filterExpression and exportName are null, then used to look up service as a typed entry
	Even if filterExpression or exportName is specified, then if exportTypes is present it is used to limit the candidate services to 
	those which were exported using all of the specified set of export types. 
	- proxyTypes: must be present if exportTypes is not. If present, then the proxyTypes are used to create the proxy to the service
	which is passed to client users of the service. If not present, then the export types (from the exportTypes attribute)
	are also used as the proxy types.
		</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="id" type="xsd:ID"/>
			<xsd:attribute name="exportName" type="xsd:string" use="optional"/>
			<xsd:attribute name="exportTypes" type="xsd:string" use="optional"/>
			<xsd:attribute name="proxyTypes" type="xsd:string" use="optional"/>
			<xsd:attribute name="filterExpression" type="xsd:string" use="optional"/>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="list">
		<xsd:annotation>
			<xsd:documentation>
	Used to create a java.util.List which is backed by Impala service registry entries.
	
	The following attributes apply:
	- filterExpression: used to filter services which are eligible for adding to the list
	- exportTypes: if exportTypes is present it is used to limit the candidate services to 
	those which were exported using all of the specified set of export types. 
	- proxyTypes: if present, then the proxyTypes are used to create the proxy to the service
	for each entry in the map. If not present, then the export types (from the exportTypes attribute)
	are also used as the proxy types. If neither is present, then Impala will attempt to create a
	CGLIB proxy of the class.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="id" type="xsd:ID"/>
			<xsd:attribute name="filterExpression" type="xsd:string" use="required"/>
			<xsd:attribute name="exportTypes" type="xsd:string" use="optional"/>
			<xsd:attribute name="proxyTypes" type="xsd:string" use="optional"/>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="map">
		<xsd:annotation>
			<xsd:documentation>
	Used to create a java.util.Map which is backed by Impala service registry entries.
	
	The following attributes apply:
	- filterExpression: used to filter services which are eligible for adding to the list
	- exportTypes: if exportTypes is present it is used to limit the candidate services to 
	those which were exported using all of the specified set of export types. 
	- proxyTypes: if present, then the proxyTypes are used to create the proxy to the service
	for each entry in the map. If not present, then the export types (from the exportTypes attribute)
	are also used as the proxy types. If neither is present, then Impala will attempt to create a
	CGLIB proxy of the class.
	- mapKey: the service attribute used as the key for the map. By default this will be 'mapkey'
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="id" type="xsd:ID"/>
			<xsd:attribute name="filterExpression" type="xsd:string" use="required"/>
			<xsd:attribute name="exportTypes" type="xsd:string" use="optional"/>
			<xsd:attribute name="proxyTypes" type="xsd:string" use="optional"/>
			<xsd:attribute name="mapKey" type="xsd:string" use="optional"/>
		</xsd:complexType>
	</xsd:element>

</xsd:schema>